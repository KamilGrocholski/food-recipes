// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
    Review        Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Ingredient {
    id      Int      @id @default(autoincrement())
    name    String   @unique
    amount  Float
    unit    String
    recipes Recipe[]
}

model RecipeTag {
    id       Int     @id @default(autoincrement())
    name     String  @unique
    recipe   Recipe? @relation(fields: [recipeId], references: [id])
    recipeId Int?
}

model Instruction {
    id          Int    @id @default(autoincrement())
    number      Int
    description String

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId Int
}

model Cousine {
    id    Int    @id @default(autoincrement())
    name  String @unique
    image String

    recipe Recipe[]
}

model Recipe {
    id            Int     @id @default(autoincrement())
    name          String  @unique
    description   String
    image         String
    cookTimeInMin Int
    prepTimeInMin Int
    isPublished   Boolean @default(false)

    author       User          @relation(fields: [authorId], references: [id])
    authorId     String
    cousine      Cousine       @relation(fields: [cousineId], references: [id])
    cousineId    Int
    reviews      Review[]
    ingredients  Ingredient[]
    instructions Instruction[]
    recipeTags   RecipeTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id      Int    @id @default(autoincrement())
    comment String
    rating  Int

    author   User   @relation(fields: [authorId], references: [id])
    authorId String
    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
